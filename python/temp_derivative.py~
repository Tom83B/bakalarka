def V(T, lnP, z):
	V0 = (3./32)*(cp(T,lnP)*rho(T,lnP)*opac(T,lnP)*H(T,lnP,z))/(sigma*T**3)*alpha**2*np.sqrt(R*T/(8e-3*mu(T,lnP)))
	print V0
	return V0

def U(T, lnP, z):
	U0 = 12*(sigma*T**3/(cp(T,lnP)*rho(T,lnP)**2*opac(T,lnP)*H(T,lnP,z)))*alpha**2*(8e-3*mu(T,lnP)/(R*T))
	print U0
	return U0

def radG(T, lnP, z):
	radG0 = (3./16)*(opac(T,lnP)*rho(T,lnP)*H(T,lnP,z)/(sigma*T**4))
	print radG0
	print "   "
	return radG0

def adG(T, lnP):
	adG0 = (2+x(T,lnP)*(1-x(T,lnP))*(2.5+chi/(k*T)))/(5+x(T,lnP)*(1-x(T,lnP))*(2.5+chi/(k*T))**2)
	print adG0
	return adG0

def messyTDeriv(U, V, adG, radG):
	TLDR = -((0.333333*(-1.+6.*U*V-3.*adG*V**2))/V**2)-(0.419974*(-1.*(-1.+6.*U*V-3.*adG*V**2)**2+3.*V**2*(2.*radG-6.*adG*U*V-6.*radG*U*V+8.*U**3*V+3.*adG**2*V**2)))/(V**2*(2.*-36.*U*V+18.*adG*V**2-18.*radG*V**2+216.*U**2*V**2-162.*adG*U*V**3+162.*radG*U*V**3-504.*U**3*V**3+27.*adG**2*V**4-54.*adG*radG*V**4+27.*radG**2*V**4+324.*adG*U**2*V**4-324.*radG*U**2*V**4+432.*U**4*V**4-216.*adG*U**3*V**5+216.*radG*U**3*V**5+np.sqrt((2.*-36.*U*V+18.*adG*V**2-18.*radG*V**2+216.*U**2*V**2-162.*adG*U*V**3+162.*radG*U*V**3-504.*U**3*V**3+27.*adG**2*V**4-54.*adG*radG*V**4+27.*radG**2*V**4+324.*adG*U**2*V**4-324.*radG*U**2*V**4+432.*U**4*V**4-216.*adG*U**3*V**5+216.*radG*U**3*V**5)**2+4.*(-1.*(-1.+6.*U*V-3.*adG*V**2)**2+3.*V**2*(2.*radG-6.*adG*U*V-6.*radG*U*V+8.*U**3*V+3.*adG**2*V**2))**3))**(1./3.))+1/V**2*0.264567*(2.*-36.*U*V+18.*adG*V**2-18.*radG*V**2+216.*U**2*V**2-162.*adG*U*V**3+162.*radG*U*V**3-504.*U**3*V**3+27.*adG**2*V**4-54.*adG*radG*V**4+27.*radG**2*V**4+324.*adG*U**2*V**4-324.*radG*U**2*V**4+432.*U**4*V**4-216.*adG*U**3*V**5+216.*radG*U**3*V**5+np.sqrt((2.*-36.*U*V+18.*adG*V**2-18.*radG*V**2+216.*U**2*V**2-162.*adG*U*V**3+162.*radG*U*V**3-504.*U**3*V**3+27.*adG**2*V**4-54.*adG*radG*V**4+27.*radG**2*V**4+324.*adG*U**2*V**4-324.*radG*U**2*V**4+432.*U**4*V**4-216.*adG*U**3*V**5+216.*radG*U**3*V**5)**2+4.*(-1.*(-1.+6.*U*V-3.*adG*V**2)**2+3.*V**2*(2.*radG-6.*adG*U*V-6.*radG*U*V+8.*U**3*V+3.*adG**2*V**2))**3))**(1./3.)
	print TLDR
	print "    "
	return TLDR


def TDeriv(T, lnP, z):
	dtdz = messyTDeriv( np.complex(U(T,lnP,z)), np.complex(V(T,lnP,z)), np.complex(adG(T,lnP)), np.complex(radG(T,lnP,z)) )
	return dtdz.item()
#	return messyTDeriv( U(T,lnP,z), V(T,lnP,z), radG(T,lnP,z), adG(T,lnP) )
