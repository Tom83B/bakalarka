# -*- coding: utf-8 -*-
import os.path
import sys
sys.path.append('/home/tom/Documents/skola/bakalarka/python/')
sys.path.append('/home/tom/Documents/skola/bakalarka/python/EOS/')

import numpy as np

import eos
from const import *
import ext_data as ext
from ext_data import g

irad = 0

#ionizace
def x(T, P):
    lnP = np.log(P)
    A = (2.5*np.log10(T)-13.53*5040/T-0.48-np.log(X)-lnP/np.log(10)-np.log10(mu0))
    return np.sqrt(10**A/(1+10**A))

#molární hmotnost opravená o ionizaci
def mu(T, P):
	return mu0/(1+x(T, P))

def rho(T, P, z):
	return eos.rhoofp(X, ztab, T*1e-6, P*1e-11, irad)*1e3

def opac(T, P, z):
    opac0 = ext.opac(T, rho(T,P,z))
    return opac0[0,0]

#tepelná kapacita
def cp(T, P):
	return 1e3*R/(mu(T, P))*(2.5+0.5*x(T, P)*(1-x(T, P))*(2.5+chi/(k*T))**2)
#	r = eos.rhoofp(X, ztab, T*1e-6, np.exp(lnP)*1e-11, irad)	#rhoofp vraci hustotu v g/cm^3
#	reteos = eos.esac(X, ztab, T*1e-6, r, 7, irad)
#	P, E, S, cv, chiRho, chiT, gamma1 = reteos[:7]
#	return gamma1/cv

#tlaková škála
def H(T, P, z):
	return P/(rho(T, P, z)*g(z))


#   gradienty
#_______________________________________________________

def V(T, P, z):
	V0 = (3./32)*(cp(T,P)*rho(T,P,z)*opac(T,P,z)*H(T,P,z))/(sigma*T**3)*alpha**2*np.sqrt(R*T/(8e-3*mu(T,P)))
	return V0

#def U(T, P, z):
#	U0 = 12*(sigma*T**3/(cp(T,P)*rho(T,P,z)**2*opac(T,P,z)*H(T,P,z)))*(1/alpha)**2*np.sqrt(8e-3*mu(T,P)/(R*T))
#	return U0


def U(T, P, z):
	U0 = 12*(sigma*T**3/(cp(T,P)*rho(T,P,z)**2*opac(T,P,z)*H(T,P,z)**2))*(1/alpha)**2*np.sqrt(8*H(T,P,z)/g(z))
	return U0

def radG(T, P, z):
	radG0 = (3./64)*(opac(T,P,z)*P*4e26/(2e30*np.pi*G*sigma*T**4))
	return radG0

def adG(T, P):
	adG0 = (2+x(T,P)*(1-x(T,P))*(2.5+chi/(k*T)))/(5+x(T,P)*(1-x(T,P))*(2.5+chi/(k*T))**2)
	return adG0

